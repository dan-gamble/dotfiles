{"id":"89f9122d-9598-49c0-867c-8bfc397ebef7","zed":"context","version":"0.4.0","text":"\n\n\nHow do I correctly use the ```tsx oka-app/app/context/LocalizedContext.tsx\nimport * as React from \"react\";\nimport {\n\tuseShop,\n\tuseShopCurrencies,\n\tuseShopLocales,\n} from \"~/context/ShopContext\";\nimport { type CurrencyCode, ShopLocale } from \"~/types/admin.types\";\n\ntype Action =\n\t| {\n\t\t\ttype: \"SET_CURRENCY\";\n\t\t\tpayload: CurrencyCode;\n\t  }\n\t| {\n\t\t\ttype: \"SET_LOCALE\";\n\t\t\tpayload: string;\n\t  };\ntype Dispatch = (action: Action) => void;\ntype State = { currency: CurrencyCode; locale: string };\ntype LocalizedProviderProps = { children: React.ReactNode };\n\nconst LocalizedContext = React.createContext<\n\t{ state: State; dispatch: Dispatch } | undefined\n>(undefined);\n\nfunction localizedReducer(state: State, action: Action) {\n\tswitch (action.type) {\n\t\tcase \"SET_CURRENCY\": {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrency: action.payload,\n\t\t\t};\n\t\t}\n\t\tcase \"SET_LOCALE\": {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlocale: action.payload,\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport function LocalizedProvider({ children }: LocalizedProviderProps) {\n\tconst shopCurrencies = useShopCurrencies();\n\tconst shopLocales = useShopLocales();\n\n\tconst [state, dispatch] = React.useReducer(localizedReducer, {\n\t\tcurrency: shopCurrencies[0].value,\n\t\tlocale: shopLocales.primaryLocale.locale,\n\t});\n\n\treturn (\n\t\t<LocalizedContext.Provider value={{ state, dispatch }}>\n\t\t\t{children}\n\t\t</LocalizedContext.Provider>\n\t);\n}\n\nexport function useLocalization() {\n\tconst context = React.useContext(LocalizedContext);\n\n\tif (context === undefined) {\n\t\tthrow new Error(\"useLocalization must be used within a LocalizedProvider\");\n\t}\n\n\treturn context;\n}\n```\n `LocalizedContext` in the ```tsx oka-app/app/components/LocalizedPage.tsx\nimport { Page, type PageProps } from \"@shopify/polaris\";\nimport type { PropsWithChildren } from \"react\";\nimport { useShopCurrencies } from \"~/context/ShopContext\";\n\nexport type LocalizedPageProps = {\n\ttitle: PageProps[\"title\"];\n\tbackAction?: PageProps[\"backAction\"];\n};\n\nexport function LocalizedPage({\n\ttitle,\n\tbackAction,\n\tchildren,\n\t...props\n}: PropsWithChildren<LocalizedPageProps>) {\n\tconst shopCurrencies = useShopCurrencies();\n\n\treturn (\n\t\t<Page\n\t\t\ttitle={title}\n\t\t\tbackAction={backAction}\n\t\t\tsecondaryActions={[\n\t\t\t\t{\n\t\t\t\t\t// content:\n\t\t\t\t},\n\t\t\t]}\n\t\t>\n\t\t\t{children}\n\t\t</Page>\n\t);\n}\n```\n `LocalizedPage` component?\nTo properly use the `LocalizedContext` in the `LocalizedPage` component, you'll want to add currency selection functionality using the context. Here's how you can modify the `LocalizedPage` component:\n\n```tsx\nimport { Page, type PageProps, Select } from \"@shopify/polaris\";\nimport type { PropsWithChildren } from \"react\";\nimport { useShopCurrencies } from \"~/context/ShopContext\";\nimport { useLocalization } from \"~/context/LocalizedContext\";\n\nexport type LocalizedPageProps = {\n  title: PageProps[\"title\"];\n  backAction?: PageProps[\"backAction\"];\n};\n\nexport function LocalizedPage({\n  title,\n  backAction,\n  children,\n  ...props\n}: PropsWithChildren<LocalizedPageProps>) {\n  const shopCurrencies = useShopCurrencies();\n  const { state, dispatch } = useLocalization();\n\n  const handleCurrencyChange = (value: string) => {\n    dispatch({ type: \"SET_CURRENCY\", payload: value });\n  };\n\n  return (\n    <Page\n      title={title}\n      backAction={backAction}\n      secondaryActions={[\n        {\n          content: (\n            <Select\n              label=\"Currency\"\n              options={shopCurrencies}\n              onChange={handleCurrencyChange}\n              value={state.currency}\n              labelHidden\n            />\n          ),\n        },\n      ]}\n    >\n      {children}\n    </Page>\n  );\n}\n```\n\nThen, make sure to wrap your app with the `LocalizedProvider` where you want the context to be available:\n\n```tsx\n// In your app's root component or layout\nimport { LocalizedProvider } from \"~/context/LocalizedContext\";\n\nfunction App() {\n  return (\n    <LocalizedProvider>\n      {/* Your app components */}\n      <LocalizedPage title=\"My Page\">\n        {/* Page content */}\n      </LocalizedPage>\n    </LocalizedProvider>\n  );\n}\n```\n\nThis implementation:\n\n1. Imports the `useLocalization` hook from your context\n2. Uses the context's state and dispatch function to manage the currency\n3. Adds a currency selector as a secondary action in the Page component\n4. Updates the currency in the context when the selection changes\n\nThe currency selection will now be maintained across your app wherever the `LocalizedProvider` is available. You can access the current currency value using `state.currency` from the `useLocalization` hook in any child component.\n\nMake sure that your `shopCurrencies` array contains objects with the correct structure for the Polaris `Select` component (typically `{ label: string, value: string }`).\nI want the `<LocalizedProvider>` to effectively be auto injected when the `<LocalizedPage>` component is used instead of needing both\nYou can wrap the `LocalizedPage` component with the `LocalizedProvider` internally to achieve this. Here's how to modify the `LocalizedPage` component:\n\n```tsx\nimport { Page, type PageProps, Select } from \"@shopify/polaris\";\nimport type { PropsWithChildren } from \"react\";\nimport { useShopCurrencies } from \"~/context/ShopContext\";\nimport { LocalizedProvider, useLocalization } from \"~/context/LocalizedContext\";\n\nexport type LocalizedPageProps = {\n  title: PageProps[\"title\"];\n  backAction?: PageProps[\"backAction\"];\n};\n\nfunction LocalizedPageContent({\n  title,\n  backAction,\n  children,\n  ...props\n}: PropsWithChildren<LocalizedPageProps>) {\n  const shopCurrencies = useShopCurrencies();\n  const { state, dispatch } = useLocalization();\n\n  const handleCurrencyChange = (value: string) => {\n    dispatch({ type: \"SET_CURRENCY\", payload: value });\n  };\n\n  return (\n    <Page\n      title={title}\n      backAction={backAction}\n      secondaryActions={[\n        {\n          content: (\n            <Select\n              label=\"Currency\"\n              options={shopCurrencies}\n              onChange={handleCurrencyChange}\n              value={state.currency}\n              labelHidden\n            />\n          ),\n        },\n      ]}\n    >\n      {children}\n    </Page>\n  );\n}\n\nexport function LocalizedPage(props: PropsWithChildren<LocalizedPageProps>) {\n  return (\n    <LocalizedProvider>\n      <LocalizedPageContent {...props} />\n    </LocalizedProvider>\n  );\n}\n```\n\nNow you can use the `LocalizedPage` component directly without needing to wrap it in a `LocalizedProvider`:\n\n```tsx\n// In any component\nfunction MyPage() {\n  return (\n    <LocalizedPage title=\"My Page\">\n      {/* Page content */}\n    </LocalizedPage>\n  );\n}\n```\n\nThis approach:\n1. Splits the component into two parts: an inner component (`LocalizedPageContent`) that uses the context and an outer component (`LocalizedPage`) that provides the context\n2. Automatically provides the localization context whenever `LocalizedPage` is used\n3. Keeps the same functionality but makes it more convenient to use\n4. Encapsulates the context provider logic within the component that needs it\n\nThis pattern is especially useful when you want to ensure that certain components always have access to specific context without requiring the developer to remember to wrap them in the appropriate provider.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2565}}},{"id":{"replica_id":0,"value":61},"start":2287,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2566}}},{"id":{"replica_id":0,"value":62},"start":4718,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2567}}},{"id":{"replica_id":0,"value":137},"start":4852,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2568}}},{"id":{"replica_id":0,"value":138},"start":7205,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2569}}}],"summary":"Implementing LocalizedContext in Page Component","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":30,"end":1590},"icon":"File","label":"oka-app/app/context/LocalizedContext.tsx","metadata":{"path":"oka-app/app/context/LocalizedContext.tsx"}},{"range":{"start":1617,"end":2259},"icon":"File","label":"oka-app/app/components/LocalizedPage.tsx","metadata":{"path":"oka-app/app/components/LocalizedPage.tsx"}}]}